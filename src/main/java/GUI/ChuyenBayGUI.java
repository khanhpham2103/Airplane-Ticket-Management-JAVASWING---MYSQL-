package GUI;

import BUS.ChuyenBayBUS;
import DTO.ChuyenBayDTO;
import GUISupport.TableDark;
import GUISupport.jpanelGradient;
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author PHAM PHU KHANH
 */
public class ChuyenBayGUI extends javax.swing.JFrame {

    /**
     * Creates new form QLCBFrame
     */
    public ChuyenBayGUI() throws Exception {
        initComponents();
//        Insert();
        setLocationRelativeTo(null);
        addToComboBox();
        CreateHeader();
        list();
    }

    public void CreateHeader() {
        Vector header = new Vector();
        header.add("Mã chuyến bay");
        header.add("Lộ trình");
        header.add("Máy bay");
        header.add("Lịch bay");
        header.add("Thời gian đi");
        header.add("Thời gian đến");
        header.add("Tổng ghế");
        header.add("Thường (Đã đặt)");
        header.add("Thương gia (Đã đặt)");
        if (model.getRowCount() == 0) {
            model = new DefaultTableModel(header, 0);
        }
        tbl.setModel(model);
    }

    public void ShowModel(DefaultTableModel md, ArrayList<ChuyenBayDTO> hdArrList) {
        Vector data;
        model.setRowCount(0);
        for (ChuyenBayDTO cb : hdArrList) {
            data = new Vector();
            data.add(cb.getFlightID());
            data.add(cb.getRouteID());
            data.add(cb.getAirplaneID());
            data.add(cb.getFlightScheduleID());
            data.add(cb.getDepartureTime());
            data.add(cb.getArrivalTime());
            data.add(cb.getTotalSeats());
            data.add(cb.getBookedECOSaets());
            data.add(cb.getBookedBUSSeats());
            md.addRow(data);
        }
        tbl.setModel(md);
    }

    public void list() {
        // Nếu mà có dữ liệu hiện tại thì dùng lun , không có thì kéo db lên
        if (bus.getList() == null) {
            bus.list();
        }
        ArrayList<ChuyenBayDTO> dsdto = bus.getList();
        ShowModel(model, dsdto);
    }
//    private void Insert() {
//        ArrAtribute[0] = "invoiceID";
//        ArrAtribute[1] = "departureLocation";
//        ArrAtribute[2] = "arrivalLocation";
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        routeSearch = new javax.swing.JFrame();
        routeLabel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        information = new javax.swing.JPanel();
        departure = new javax.swing.JLabel();
        arrival = new javax.swing.JLabel();
        departureField = new javax.swing.JTextField();
        arrivalField = new javax.swing.JTextField();
        btnOK = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        flightScheduleSearch = new javax.swing.JFrame();
        flightScheduleLabel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        fliScheInformation = new javax.swing.JPanel();
        departureAirport = new javax.swing.JLabel();
        arrivalAirport = new javax.swing.JLabel();
        btnOK1 = new javax.swing.JButton();
        btnExit1 = new javax.swing.JButton();
        arAirportCB = new javax.swing.JComboBox<>();
        deAirportCB = new javax.swing.JComboBox<>();
        backgroundPanel = new jpanelGradient();
        informationPanel = new javax.swing.JPanel();
        flightIDLabel = new javax.swing.JLabel();
        routeIDLabel = new javax.swing.JLabel();
        aiplaneIDLabel = new javax.swing.JLabel();
        txtFlight = new javax.swing.JTextField();
        scheduleLabel = new javax.swing.JLabel();
        DepLabel = new javax.swing.JLabel();
        txtDeparture = new javax.swing.JTextField();
        ArrLabel = new javax.swing.JLabel();
        txtArrival = new javax.swing.JTextField();
        seatsLabel = new javax.swing.JLabel();
        BUSLabel = new javax.swing.JLabel();
        ECOLabel = new javax.swing.JLabel();
        txtBUS = new javax.swing.JTextField();
        onECOTotal = new javax.swing.JTextField();
        onBUSTotal = new javax.swing.JTextField();
        routeComboBox = new javax.swing.JComboBox<>();
        airplaneComboBox = new javax.swing.JComboBox<>();
        FliScheComboBox = new javax.swing.JComboBox<>();
        slash1 = new javax.swing.JLabel();
        slash2 = new javax.swing.JLabel();
        txtSeats = new javax.swing.JTextField();
        txtECO = new javax.swing.JTextField();
        decreaseECO = new javax.swing.JButton();
        increaseECO = new javax.swing.JButton();
        decreaseBUS = new javax.swing.JButton();
        increaseBUS = new javax.swing.JButton();
        QLCBPanel = new javax.swing.JPanel();
        QLCBLabel = new javax.swing.JLabel();
        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new TableDark();
        dataFieldCB = new javax.swing.JComboBox<>();
        txtFind = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        searchWarning = new javax.swing.JLabel();
        functionPanel = new javax.swing.JPanel();
        btnUpdate = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnShow = new javax.swing.JButton();
        btnEmpty = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();

        routeSearch.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        routeSearch.setSize(new java.awt.Dimension(430, 250));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Tìm kiếm lộ trình");

        javax.swing.GroupLayout routeLabelLayout = new javax.swing.GroupLayout(routeLabel);
        routeLabel.setLayout(routeLabelLayout);
        routeLabelLayout.setHorizontalGroup(
            routeLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routeLabelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        routeLabelLayout.setVerticalGroup(
            routeLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routeLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        departure.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        departure.setText("Điểm đi:");

        arrival.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        arrival.setText("Điểm đến:");

        departureField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        arrivalField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnExit.setText("Thoát");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout informationLayout = new javax.swing.GroupLayout(information);
        information.setLayout(informationLayout);
        informationLayout.setHorizontalGroup(
            informationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(informationLayout.createSequentialGroup()
                        .addComponent(departure)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(informationLayout.createSequentialGroup()
                        .addComponent(arrival)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(informationLayout.createSequentialGroup()
                                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(informationLayout.createSequentialGroup()
                                .addGroup(informationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(departureField, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(arrivalField))
                                .addContainerGap(37, Short.MAX_VALUE))))))
        );
        informationLayout.setVerticalGroup(
            informationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(departure)
                    .addComponent(departureField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(informationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arrival)
                    .addComponent(arrivalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnExit))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout routeSearchLayout = new javax.swing.GroupLayout(routeSearch.getContentPane());
        routeSearch.getContentPane().setLayout(routeSearchLayout);
        routeSearchLayout.setHorizontalGroup(
            routeSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routeSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(routeSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(routeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(routeSearchLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(information, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 24, Short.MAX_VALUE)))
                .addContainerGap())
        );
        routeSearchLayout.setVerticalGroup(
            routeSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routeSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(routeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(information, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        flightScheduleSearch.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        flightScheduleSearch.setSize(new java.awt.Dimension(430, 250));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Tìm kiếm lịch bay");

        javax.swing.GroupLayout flightScheduleLabelLayout = new javax.swing.GroupLayout(flightScheduleLabel);
        flightScheduleLabel.setLayout(flightScheduleLabelLayout);
        flightScheduleLabelLayout.setHorizontalGroup(
            flightScheduleLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flightScheduleLabelLayout.createSequentialGroup()
                .addContainerGap(117, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap(117, Short.MAX_VALUE))
        );
        flightScheduleLabelLayout.setVerticalGroup(
            flightScheduleLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, flightScheduleLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        departureAirport.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        departureAirport.setText("Sân bay đi:");

        arrivalAirport.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        arrivalAirport.setText("Sân bay đến:");

        btnOK1.setText("OK");
        btnOK1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOK1ActionPerformed(evt);
            }
        });

        btnExit1.setText("Thoát");
        btnExit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExit1ActionPerformed(evt);
            }
        });

        arAirportCB.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        arAirportCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Chọn sân bay đến" }));

        deAirportCB.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        deAirportCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Chọn sân bay đi" }));
        deAirportCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deAirportCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fliScheInformationLayout = new javax.swing.GroupLayout(fliScheInformation);
        fliScheInformation.setLayout(fliScheInformationLayout);
        fliScheInformationLayout.setHorizontalGroup(
            fliScheInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fliScheInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fliScheInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(arrivalAirport)
                    .addComponent(departureAirport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fliScheInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deAirportCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arAirportCB, 0, 228, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(fliScheInformationLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(btnOK1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(btnExit1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(104, Short.MAX_VALUE))
        );
        fliScheInformationLayout.setVerticalGroup(
            fliScheInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fliScheInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fliScheInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(departureAirport)
                    .addComponent(deAirportCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(fliScheInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arrivalAirport)
                    .addComponent(arAirportCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fliScheInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK1)
                    .addComponent(btnExit1))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout flightScheduleSearchLayout = new javax.swing.GroupLayout(flightScheduleSearch.getContentPane());
        flightScheduleSearch.getContentPane().setLayout(flightScheduleSearchLayout);
        flightScheduleSearchLayout.setHorizontalGroup(
            flightScheduleSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flightScheduleSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(flightScheduleSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(flightScheduleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(flightScheduleSearchLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(fliScheInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        flightScheduleSearchLayout.setVerticalGroup(
            flightScheduleSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flightScheduleSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flightScheduleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(fliScheInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý chuyến bay");
        setBackground(new java.awt.Color(0, 153, 255));
        setPreferredSize(new java.awt.Dimension(1120, 737));

        backgroundPanel.setBackground(new java.awt.Color(0, 153, 255));

        informationPanel.setBackground(new java.awt.Color(0, 153, 255));
        informationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin chuyến bay", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 24), new java.awt.Color(255, 255, 255))); // NOI18N
        informationPanel.setOpaque(false);

        flightIDLabel.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        flightIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        flightIDLabel.setText("Mã chuyến bay:");
        flightIDLabel.setToolTipText("");

        routeIDLabel.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        routeIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        routeIDLabel.setText("Lộ trình:");
        routeIDLabel.setToolTipText(" ");

        aiplaneIDLabel.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        aiplaneIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        aiplaneIDLabel.setText("Máy bay:");

        txtFlight.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtFlight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFlightFocusLost(evt);
            }
        });

        scheduleLabel.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        scheduleLabel.setForeground(new java.awt.Color(255, 255, 255));
        scheduleLabel.setText("Lịch bay:");

        DepLabel.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        DepLabel.setForeground(new java.awt.Color(255, 255, 255));
        DepLabel.setText("Thời gian đi:");

        txtDeparture.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtDeparture.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDepartureFocusLost(evt);
            }
        });

        ArrLabel.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        ArrLabel.setForeground(new java.awt.Color(255, 255, 255));
        ArrLabel.setText("Thời gian đến:");

        txtArrival.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtArrival.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtArrivalFocusLost(evt);
            }
        });

        seatsLabel.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        seatsLabel.setForeground(new java.awt.Color(255, 255, 255));
        seatsLabel.setText("Tổng ghế:");
        seatsLabel.setToolTipText(" ");

        BUSLabel.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        BUSLabel.setForeground(new java.awt.Color(255, 255, 255));
        BUSLabel.setText("Thương gia (Đã đặt):");

        ECOLabel.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        ECOLabel.setForeground(new java.awt.Color(255, 255, 255));
        ECOLabel.setText("Thường (Đã đặt):");

        txtBUS.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtBUS.setText("0");
        txtBUS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBUSFocusLost(evt);
            }
        });

        onECOTotal.setEditable(false);
        onECOTotal.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        onECOTotal.setEditable(false);
        onECOTotal.setBackground(Color.lightGray);
        onECOTotal.setPreferredSize(new java.awt.Dimension(68, 33));
        onECOTotal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                onECOTotalFocusLost(evt);
            }
        });

        onBUSTotal.setEditable(false);
        onBUSTotal.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        onBUSTotal.setEditable(false);
        onBUSTotal.setBackground(Color.lightGray);
        onBUSTotal.setPreferredSize(new java.awt.Dimension(68, 33));
        onBUSTotal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                onBUSTotalFocusLost(evt);
            }
        });

        routeComboBox.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        routeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Chọn lộ trình" }));

        airplaneComboBox.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        airplaneComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Chọn máy bay" }));
        airplaneComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airplaneComboBoxActionPerformed(evt);
            }
        });

        FliScheComboBox.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        FliScheComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Chọn lịch bay" }));

        slash1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        slash1.setForeground(new java.awt.Color(255, 255, 255));
        slash1.setText("/");

        slash2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        slash2.setForeground(new java.awt.Color(255, 255, 255));
        slash2.setText("/");

        txtSeats.setEditable(false);
        txtSeats.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtSeats.setEditable(false);
        txtSeats.setBackground(Color.lightGray);
        txtSeats.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSeatsFocusLost(evt);
            }
        });

        txtECO.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtECO.setText("0");
        txtECO.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtECOFocusLost(evt);
            }
        });
        txtECO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtECOActionPerformed(evt);
            }
        });

        decreaseECO.setText("-");
        decreaseECO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseECOActionPerformed(evt);
            }
        });

        increaseECO.setText("+");
        increaseECO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseECOActionPerformed(evt);
            }
        });

        decreaseBUS.setText("-");
        decreaseBUS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseBUSActionPerformed(evt);
            }
        });

        increaseBUS.setText("+");
        increaseBUS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseBUSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout informationPanelLayout = new javax.swing.GroupLayout(informationPanel);
        informationPanel.setLayout(informationPanelLayout);
        informationPanelLayout.setHorizontalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(routeIDLabel)
                    .addComponent(scheduleLabel)
                    .addComponent(DepLabel)
                    .addComponent(aiplaneIDLabel)
                    .addComponent(flightIDLabel)
                    .addComponent(ArrLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDeparture)
                    .addComponent(FliScheComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 411, Short.MAX_VALUE)
                    .addComponent(airplaneComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(routeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFlight, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtArrival, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(11, 11, 11)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BUSLabel)
                    .addComponent(seatsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ECOLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(informationPanelLayout.createSequentialGroup()
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtBUS, javax.swing.GroupLayout.PREFERRED_SIZE, 51, Short.MAX_VALUE)
                            .addComponent(txtECO, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addGap(0, 0, 0)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(informationPanelLayout.createSequentialGroup()
                                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(increaseBUS, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(decreaseBUS, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(slash2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(onBUSTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(informationPanelLayout.createSequentialGroup()
                                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(increaseECO, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(decreaseECO, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(slash1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(onECOTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(txtSeats))
                .addContainerGap())
        );
        informationPanelLayout.setVerticalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(informationPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(flightIDLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(routeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(routeIDLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(airplaneComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aiplaneIDLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FliScheComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scheduleLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDeparture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DepLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtArrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ArrLabel)))
                    .addGroup(informationPanelLayout.createSequentialGroup()
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seatsLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(slash1)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtECO, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ECOLabel))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informationPanelLayout.createSequentialGroup()
                                    .addComponent(increaseECO, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, 0)
                                    .addComponent(decreaseECO, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(onECOTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informationPanelLayout.createSequentialGroup()
                                    .addComponent(increaseBUS, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, 0)
                                    .addComponent(decreaseBUS, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(slash2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtBUS, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BUSLabel))
                            .addComponent(onBUSTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 2, Short.MAX_VALUE))
        );

        QLCBPanel.setBackground(new java.awt.Color(0, 153, 255));
        QLCBPanel.setOpaque(false);

        QLCBLabel.setBackground(new java.awt.Color(0, 153, 255));
        QLCBLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        QLCBLabel.setForeground(new java.awt.Color(255, 255, 255));
        QLCBLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        QLCBLabel.setText("Quản lý chuyến bay");

        javax.swing.GroupLayout QLCBPanelLayout = new javax.swing.GroupLayout(QLCBPanel);
        QLCBPanel.setLayout(QLCBPanelLayout);
        QLCBPanelLayout.setHorizontalGroup(
            QLCBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QLCBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(QLCBLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        QLCBPanelLayout.setVerticalGroup(
            QLCBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(QLCBLabel)
        );

        tablePanel.setBackground(new java.awt.Color(0, 153, 255));
        tablePanel.setOpaque(false);

        tbl.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã chuyến bay", "Lộ trình", "Máy bay", "Lịch bay", "Ngày đi", "Ngày đến", "Tổng ghế", "Thương gia", "Thường"
            }
        ));
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        tbl.setRowHeight(tbl.getRowHeight() + 15);
        tbl.getTableHeader().setFont(new Font("Segoe UI", 1 , 16));
        jScrollPane1.setViewportView(tbl);

        dataFieldCB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dataFieldCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Chọn tiêu chí", "Mã chuyến bay", "Mã lộ trình", "Lộ trình", "Máy bay", "Mã lịch bay", "Lịch bay" }));
        dataFieldCB.setSelectedIndex(0);
        dataFieldCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataFieldCBActionPerformed(evt);
            }
        });

        txtFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindActionPerformed(evt);
            }
        });

        btnFind.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnFind.setText("Tìm kiếm");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        searchWarning.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        searchWarning.setForeground(new java.awt.Color(204, 0, 51));
        searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dataFieldCB, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFind, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFind)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchWarning, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addGap(268, 268, 268))
            .addComponent(jScrollPane1)
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnFind)
                        .addComponent(txtFind, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dataFieldCB, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))
        );

        searchWarning.setVisible(false);

        functionPanel.setBackground(new java.awt.Color(0, 153, 255));
        functionPanel.setOpaque(false);

        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdate.setText("Sửa");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDel.setText("Xóa");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setText("Quay lại");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnShow.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnShow.setText("Xem danh sách");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        btnEmpty.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEmpty.setText("Làm rỗng");
        btnEmpty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmptyActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout functionPanelLayout = new javax.swing.GroupLayout(functionPanel);
        functionPanel.setLayout(functionPanelLayout);
        functionPanelLayout.setHorizontalGroup(
            functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(functionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnShow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEmpty, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        functionPanelLayout.setVerticalGroup(
            functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, functionPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnShow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEmpty, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(QLCBPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(informationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(functionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(QLCBPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(informationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addComponent(functionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)))
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed

        ShowModel(model, bus.getList());
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String flightID = txtFlight.getText();
        String routeID = routeComboBox.getItemAt(routeComboBox.getSelectedIndex()).substring(0, 5);
        String airplaneID[] = airplaneComboBox.getItemAt(airplaneComboBox.getSelectedIndex()).split(routeID);
        String flightScheduleID = FliScheComboBox.getItemAt(FliScheComboBox.getSelectedIndex()).substring(0, 5);
        String departureTime = txtDeparture.getText();
        String arrivalTime = txtArrival.getText();
        int totalSeats = Integer.parseInt(txtSeats.getText());
        String bookedECOSeats = txtECO.getText() + "/" + onECOTotal.getText();
        String bookedBUSSeats = txtBUS.getText() + "/" + onBUSTotal.getText();
        boolean check = false;
        ArrayList<ChuyenBayDTO> flightArrList = bus.getList();
        for (ChuyenBayDTO cb : flightArrList) {
            if (flightID.equals(cb.getFlightID())) {
                check = true;
                break;
            }
        }
        if (check == true) {
            JOptionPane.showMessageDialog(null, "Mã chuyến bay đã tồn tại");
        } else {
            ChuyenBayDTO cb = new ChuyenBayDTO(flightID, routeID, airplaneID[0], flightScheduleID, departureTime, arrivalTime, totalSeats, bookedECOSeats, bookedBUSSeats);
            bus.add(cb);
            ShowModel(model, bus.getList());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        txtFlight.setBackground(Color.lightGray);
        txtFlight.setEditable(false);
        int i = tbl.getSelectedRow();
        txtFlight.setText((String) tbl.getModel().getValueAt(i, 0));
        for (int j = 0; j < routeComboBox.getItemCount(); j++) {
            String cbID = routeComboBox.getItemAt(j).substring(0, 5);
            String tblID = (String) tbl.getModel().getValueAt(i, 1);
            if (cbID.equals(tblID.substring(0, 5))) {
                routeComboBox.setSelectedIndex(j);
            }
        }
        for (int j = 0; j < airplaneComboBox.getItemCount(); j++) {
            String[] cbID = airplaneComboBox.getItemAt(j).split(" ");
            String tblID = (String) tbl.getModel().getValueAt(i, 2);
            if (cbID[0].equals(tblID)) {
                airplaneComboBox.setSelectedIndex(j);
            }
        }
        for (int j = 0; j < FliScheComboBox.getItemCount(); j++) {
            String cbID = FliScheComboBox.getItemAt(j).substring(0, 5);
            String tblID = (String) tbl.getModel().getValueAt(i, 3);
            if (cbID.equals(tblID.substring(0, 5))) {
                FliScheComboBox.setSelectedIndex(j);
            }
        }
        txtDeparture.setText((String) tbl.getModel().getValueAt(i, 4));
        txtArrival.setText((String) tbl.getModel().getValueAt(i, 5));
        txtSeats.setText(String.valueOf(tbl.getModel().getValueAt(i, 6)));

        String ECOseats = (String) tbl.getModel().getValueAt(i, 7);
        String ECO[] = ECOseats.split("/");
        txtECO.setText(ECO[0]);

        String BUSseats = (String) tbl.getModel().getValueAt(i, 8);
        String BUS[] = BUSseats.split("/");
        txtBUS.setText(BUS[0]);
    }//GEN-LAST:event_tblMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String flightID = txtFlight.getText();
        String routeID = routeComboBox.getItemAt(routeComboBox.getSelectedIndex()).substring(0, 5);
        String airplaneID[] = airplaneComboBox.getItemAt(airplaneComboBox.getSelectedIndex()).split(" ");
        String flightScheduleID = FliScheComboBox.getItemAt(FliScheComboBox.getSelectedIndex()).substring(0, 5);
        String departureTime = txtDeparture.getText();
        String arrivalTime = txtArrival.getText();
        int totalSeats = Integer.parseInt(txtSeats.getText());
        String bookedECOSeats = txtECO.getText() + "/" + onECOTotal.getText();
        String bookedBUSSeats = txtBUS.getText() + "/" + onBUSTotal.getText();
        ChuyenBayDTO cb = new ChuyenBayDTO(flightID, routeID, airplaneID[0], flightScheduleID, departureTime, arrivalTime, totalSeats, bookedECOSeats, bookedBUSSeats);
        bus.set(cb);
        ShowModel(model, bus.getList());
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        bus.delete(txtFlight.getText());
        ShowModel(model, bus.getList());
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnEmptyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmptyActionPerformed
        txtFlight.setBackground(Color.white);
        txtFlight.setEditable(true);
        txtFlight.setText("");
        routeComboBox.setSelectedIndex(0);
        airplaneComboBox.setSelectedIndex(0);
        FliScheComboBox.setSelectedIndex(0);
        txtDeparture.setText("");
        txtArrival.setText("");
        txtSeats.setText("");
        txtECO.setText("0");
        txtBUS.setText("0");
        onBUSTotal.setText("");
        onECOTotal.setText("");
    }//GEN-LAST:event_btnEmptyActionPerformed

    private void txtFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindActionPerformed
        switch (dataFieldCB.getSelectedIndex()) {
            case 0:
                JOptionPane.showMessageDialog(null, "Vui lòng chọn tiêu chí bạn cần tìm");
                break;
            case 1:
                searchFlightID();
                break;
            case 2:
                searchRouteID();
                break;
            case 3:
                dataFieldCBActionPerformed(evt);
                break;
            case 4:
                searchAirplane();
                break;
            case 5:
                searchFlightScheduleID();
                break;
            case 6:
                dataFieldCBActionPerformed(evt);
                break;
        }
    }//GEN-LAST:event_txtFindActionPerformed

    private void searchFlightID() {
        model.setRowCount(0);
        for (int i = 0; i < bus.getList().size(); i++) {
            if (bus.getList().get(i).getFlightID().toLowerCase().contains(txtFind.getText().toLowerCase())) {
                ChuyenBayDTO cbTemp = bus.getList().get(i);
                Vector data = new Vector();
                data.add(cbTemp.getFlightID());
                data.add(cbTemp.getRouteID());
                data.add(cbTemp.getAirplaneID());
                data.add(cbTemp.getFlightScheduleID());
                data.add(cbTemp.getDepartureTime());
                data.add(cbTemp.getArrivalTime());
                data.add(cbTemp.getTotalSeats());
                data.add(cbTemp.getBookedECOSaets());
                data.add(cbTemp.getBookedBUSSeats());
                model.addRow(data);
            }
        }
        if (model.getRowCount() == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(true);
            searchWarning.setText("Có " + model.getRowCount() + " kết quả");
            tbl.setModel(model);
        }
    }

    private void searchRouteID() {
        model.setRowCount(0);
        String cbID = "";
        for (int i = 0; i < routeComboBox.getItemCount(); i++) {
            if (routeComboBox.getItemAt(i).toLowerCase().contains(txtFind.getText().toLowerCase())) {
                cbID = routeComboBox.getItemAt(i);
            }
        }
        for (int i = 0; i < bus.getList().size(); i++) {
            if (bus.getList().get(i).getRouteID().toLowerCase().contains(txtFind.getText().toLowerCase())) {
                ChuyenBayDTO cbTemp = bus.getList().get(i);
                Vector data = new Vector();
                data.add(cbTemp.getFlightID());
                data.add(cbID);
                data.add(cbTemp.getAirplaneID());
                data.add(cbTemp.getFlightScheduleID());
                data.add(cbTemp.getDepartureTime());
                data.add(cbTemp.getArrivalTime());
                data.add(cbTemp.getTotalSeats());
                data.add(cbTemp.getBookedECOSaets());
                data.add(cbTemp.getBookedBUSSeats());
                model.addRow(data);
            }
        }
        if (model.getRowCount() == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(true);
            searchWarning.setText("Có " + model.getRowCount() + " kết quả");
            tbl.setModel(model);
        }
    }

    private void searchAirplane() {
        model.setRowCount(0);
        String cbID = "";
        for (int i = 1; i < airplaneComboBox.getItemCount(); i++) {
            if (airplaneComboBox.getItemAt(i).toLowerCase().contains(txtFind.getText().toLowerCase())) {
                cbID = airplaneComboBox.getItemAt(i);
                for (int j = 0; j < bus.getList().size(); j++) {
                    if (bus.getList().get(j).getAirplaneID().equals(cbID.substring(0, 4))) {
                        ChuyenBayDTO cbTemp = bus.getList().get(j);
                        Vector data = new Vector();
                        data.add(cbTemp.getFlightID());
                        data.add(cbTemp.getRouteID());
                        data.add(cbID);
                        data.add(cbTemp.getFlightScheduleID());
                        data.add(cbTemp.getDepartureTime());
                        data.add(cbTemp.getArrivalTime());
                        data.add(cbTemp.getTotalSeats());
                        data.add(cbTemp.getBookedECOSaets());
                        data.add(cbTemp.getBookedBUSSeats());
                        model.addRow(data);
                    }
                }
            }
        }
        if (model.getRowCount() == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(true);
            searchWarning.setText("Có " + model.getRowCount() + " kết quả");
            tbl.setModel(model);
        }
    }

    private void searchFlightScheduleID() {
        model.setRowCount(0);
        String cbID = "";
        for (int i = 0; i < FliScheComboBox.getItemCount(); i++) {
            if (FliScheComboBox.getItemAt(i).toLowerCase().contains(txtFind.getText().toLowerCase())) {
                cbID = FliScheComboBox.getItemAt(i);
            }
        }
        for (int i = 0; i < bus.getList().size(); i++) {
            if (bus.getList().get(i).getFlightScheduleID().toLowerCase().contains(txtFind.getText().toLowerCase())) {
                ChuyenBayDTO cbTemp = bus.getList().get(i);
                Vector data = new Vector();
                data.add(cbTemp.getFlightID());
                data.add(cbTemp.getRouteID());
                data.add(cbTemp.getAirplaneID());
                data.add(cbID);
                data.add(cbTemp.getDepartureTime());
                data.add(cbTemp.getArrivalTime());
                data.add(cbTemp.getTotalSeats());
                data.add(cbTemp.getBookedECOSaets());
                data.add(cbTemp.getBookedBUSSeats());
                model.addRow(data);
            }
        }
        if (model.getRowCount() == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(true);
            searchWarning.setText("Có " + model.getRowCount() + " kết quả");
            tbl.setModel(model);
        }
    }

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        txtFindActionPerformed(evt);
    }//GEN-LAST:event_btnFindActionPerformed

    private void txtECOFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtECOFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtECOFocusLost

    private void txtSeatsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSeatsFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSeatsFocusLost

    private void airplaneComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airplaneComboBoxActionPerformed
        String[] airplaneID = airplaneComboBox.getItemAt(airplaneComboBox.getSelectedIndex()).split(" ");
        txtSeats.setBackground(Color.lightGray);
        txtSeats.setEditable(false);
        txtSeats.setText(bus.getSeats(airplaneID[0]).get(0));
        onECOTotal.setBackground(Color.lightGray);
        onECOTotal.setEditable(false);
        onECOTotal.setText(bus.getSeats(airplaneID[0]).get(1));
        onBUSTotal.setBackground(Color.lightGray);
        onBUSTotal.setEditable(false);
        onBUSTotal.setText(bus.getSeats(airplaneID[0]).get(2));
    }//GEN-LAST:event_airplaneComboBoxActionPerformed

    private void onBUSTotalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_onBUSTotalFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_onBUSTotalFocusLost

    private void onECOTotalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_onECOTotalFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_onECOTotalFocusLost

    private void txtBUSFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBUSFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBUSFocusLost

    private void txtArrivalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtArrivalFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtArrivalFocusLost

    private void txtDepartureFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDepartureFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepartureFocusLost

    private void txtFlightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFlightFocusLost
        //        id = 0;
        //        ShowTextFieldWhere(id, txtStaffID.getText());
    }//GEN-LAST:event_txtFlightFocusLost

    private void increaseECOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseECOActionPerformed
        if (Integer.parseInt(txtECO.getText()) >= Integer.parseInt(onECOTotal.getText())) {

        } else {
            txtECO.setText(String.valueOf(Integer.parseInt(txtECO.getText()) + 1));
        }
    }//GEN-LAST:event_increaseECOActionPerformed

    private void decreaseECOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseECOActionPerformed
        if (Integer.parseInt(txtECO.getText()) <= 0) {

        } else {
            txtECO.setText(String.valueOf(Integer.parseInt(txtECO.getText()) - 1));
        }
    }//GEN-LAST:event_decreaseECOActionPerformed

    private void increaseBUSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseBUSActionPerformed
        if (Integer.parseInt(txtBUS.getText()) >= Integer.parseInt(onBUSTotal.getText())) {

        } else {
            txtBUS.setText(String.valueOf(Integer.parseInt(txtBUS.getText()) + 1));
        }
    }//GEN-LAST:event_increaseBUSActionPerformed

    private void decreaseBUSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseBUSActionPerformed
        if (Integer.parseInt(txtBUS.getText()) <= 0) {

        } else {
            txtBUS.setText(String.valueOf(Integer.parseInt(txtBUS.getText()) - 1));
        }
    }//GEN-LAST:event_decreaseBUSActionPerformed

    private void dataFieldCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataFieldCBActionPerformed
        if (dataFieldCB.getSelectedIndex() == 3) {
            routeSearch.setVisible(true);
            routeSearch.setLocationRelativeTo(null);
        }
        if (dataFieldCB.getSelectedIndex() == 6) {
            flightScheduleSearch.setVisible(true);
            flightScheduleSearch.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_dataFieldCBActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        WindowEvent closeWindow = new WindowEvent(this.routeSearch, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        model.setRowCount(0);
        String routeID = "";
        for (int i = 1; i < routeComboBox.getItemCount(); i++) {
            String routePlace[] = routeComboBox.getItemAt(i).toLowerCase().substring(7).split(" - ");
            if ((routePlace[0].contains(departureField.getText().toLowerCase()) && arrivalField.getText().isEmpty())
                    || (routePlace[1].contains(arrivalField.getText().toLowerCase()) && departureField.getText().isEmpty())
                    || (routePlace[0].contains(departureField.getText().toLowerCase()) && routePlace[1].contains(arrivalField.getText().toLowerCase()))) {
                routeID = routeComboBox.getItemAt(i);
                for (int j = 0; j < bus.getList().size(); j++) {
                    if (bus.getList().get(j).getRouteID().equals(routeID.substring(0, 5))) {
                        ChuyenBayDTO cbTemp = bus.getList().get(j);
                        Vector data = new Vector();
                        data.add(cbTemp.getFlightID());
                        data.add(routeID);
                        data.add(cbTemp.getAirplaneID());
                        data.add(cbTemp.getFlightScheduleID());
                        data.add(cbTemp.getDepartureTime());
                        data.add(cbTemp.getArrivalTime());
                        data.add(cbTemp.getTotalSeats());
                        data.add(cbTemp.getBookedECOSaets());
                        data.add(cbTemp.getBookedBUSSeats());
                        model.addRow(data);
                    }
                }
            }
        }
        if (model.getRowCount() == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(true);
            searchWarning.setText("Có " + model.getRowCount() + " kết quả");
            tbl.setModel(model);
        }
        WindowEvent closeWindow = new WindowEvent(this.routeSearch, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }//GEN-LAST:event_btnOKActionPerformed

    boolean deAirportCBisEmpty() {
        if (deAirportCB.getSelectedIndex() == 0) {
            return true;
        }
        return false;
    }

    boolean arAirportCBisEmpty() {
        if (arAirportCB.getSelectedIndex() == 0) {
            return true;
        }
        return false;
    }
    private void btnOK1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOK1ActionPerformed
        model.setRowCount(0);
        String deAirportID = deAirportCB.getItemAt(deAirportCB.getSelectedIndex()).substring(0, 3);
        String arAirportID = arAirportCB.getItemAt(arAirportCB.getSelectedIndex()).substring(0, 3);
        String cbID = deAirportID + "-" +arAirportID;
        System.out.println(cbID+"\n");
        for (int i = 1; i < FliScheComboBox.getItemCount(); i++) {
            System.out.println(FliScheComboBox.getItemAt(i).substring(7,14));
            if (FliScheComboBox.getItemAt(i).substring(7,14).equals(cbID)) {
                String flightSchedule = FliScheComboBox.getItemAt(i).substring(0,5);
                System.out.println(flightSchedule);
                for (int j = 0; j < bus.getList().size(); j++) {
                    if (bus.getList().get(j).getFlightScheduleID().equals(flightSchedule)) {
                        ChuyenBayDTO cbTemp = bus.getList().get(j);
                        Vector data = new Vector();
                        data.add(cbTemp.getFlightID());
                        data.add(cbTemp.getRouteID());
                        data.add(cbTemp.getAirplaneID());
                        data.add(flightSchedule);
                        data.add(cbTemp.getDepartureTime());
                        data.add(cbTemp.getArrivalTime());
                        data.add(cbTemp.getTotalSeats());
                        data.add(cbTemp.getBookedECOSaets());
                        data.add(cbTemp.getBookedBUSSeats());
                        model.addRow(data);
                    }
                }
            }
            WindowEvent closeWindow = new WindowEvent(this.flightScheduleSearch, WindowEvent.WINDOW_CLOSING);
            Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
        }

//        for (int i = 0; i < bus.getList().size(); i++) {
//            if (bus.getList().get(i).getFlightScheduleID().equals(flightScheduleID.substring(0, 5))) {
//                ChuyenBayDTO cbTemp = bus.getList().get(i);
//                Vector data = new Vector();
//                data.add(cbTemp.getFlightID());
//                data.add(cbTemp.getRouteID());
//                data.add(cbTemp.getAirplaneID());
//                data.add(flightScheduleID);
//                data.add(cbTemp.getDepartureTime());
//                data.add(cbTemp.getArrivalTime());
//                data.add(cbTemp.getTotalSeats());
//                data.add(cbTemp.getBookedECOSaets());
//                data.add(cbTemp.getBookedBUSSeats());
//                model.addRow(data);
//            }
//        }
        if (model.getRowCount()
                == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(true);
            searchWarning.setText("Có " + model.getRowCount() + " kết quả");
            tbl.setModel(model);
        }
    }//GEN-LAST:event_btnOK1ActionPerformed

    private void btnExit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExit1ActionPerformed
        WindowEvent closeWindow = new WindowEvent(this.flightScheduleSearch, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }//GEN-LAST:event_btnExit1ActionPerformed

    private void deAirportCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deAirportCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deAirportCBActionPerformed

    private void txtECOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtECOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtECOActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        int confirmation = JOptionPane.showConfirmDialog(this, "Quay lại menu?", "Xác nhận quay lại", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.YES_OPTION) {
            MENU menu = new MENU();
            menu.setVisible(true);
            closeFrame(this);
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void closeConfirmation() {
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int confirmation = JOptionPane.showConfirmDialog(null, "Thoát ứng dụng?", "Thoát", JOptionPane.YES_NO_OPTION);
                if (confirmation == JOptionPane.YES_OPTION) {
                    e.getWindow().dispose();
                } else {
                    System.out.println("Vẫn đang chạy");
                }
            }
        });
    }

    private void addToComboBox() {
        for (String h : bus.getRouteID()) {
            routeComboBox.addItem(h);
        }
        for (String h : bus.getAirplaneID()) {
            airplaneComboBox.addItem(h);
        }
        for (String h : bus.getFlightScheduleID()) {
            FliScheComboBox.addItem(h);
        }
        for (String h : bus.getAirportID()) {
            deAirportCB.addItem(h);
        }
        for (String h : bus.getAirportID()) {
            arAirportCB.addItem(h);
        }
    }

    private void closeFrame(JFrame frame) {
        WindowEvent closeWindow = new WindowEvent(frame, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ChuyenBayGUI.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ChuyenBayGUI.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ChuyenBayGUI.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ChuyenBayGUI.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                try {
//                    new ChuyenBayGUI().setVisible(true);
//
//                } catch (Exception ex) {
//                    Logger.getLogger(ChuyenBayGUI.class
//                            .getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//
//    }
    private String[] ArrAtribute = new String[4];
//    private int id = -1;
    private DefaultTableModel model = new DefaultTableModel();
    private ChuyenBayBUS bus = new ChuyenBayBUS();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ArrLabel;
    private javax.swing.JLabel BUSLabel;
    private javax.swing.JLabel DepLabel;
    private javax.swing.JLabel ECOLabel;
    private javax.swing.JComboBox<String> FliScheComboBox;
    private javax.swing.JLabel QLCBLabel;
    private javax.swing.JPanel QLCBPanel;
    private javax.swing.JLabel aiplaneIDLabel;
    private javax.swing.JComboBox<String> airplaneComboBox;
    private javax.swing.JComboBox<String> arAirportCB;
    private javax.swing.JLabel arrival;
    private javax.swing.JLabel arrivalAirport;
    private javax.swing.JTextField arrivalField;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnEmpty;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnExit1;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnOK1;
    private javax.swing.JButton btnShow;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> dataFieldCB;
    private javax.swing.JComboBox<String> deAirportCB;
    private javax.swing.JButton decreaseBUS;
    private javax.swing.JButton decreaseECO;
    private javax.swing.JLabel departure;
    private javax.swing.JLabel departureAirport;
    private javax.swing.JTextField departureField;
    private javax.swing.JPanel fliScheInformation;
    private javax.swing.JLabel flightIDLabel;
    private javax.swing.JPanel flightScheduleLabel;
    private javax.swing.JFrame flightScheduleSearch;
    private javax.swing.JPanel functionPanel;
    private javax.swing.JButton increaseBUS;
    private javax.swing.JButton increaseECO;
    private javax.swing.JPanel information;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField onBUSTotal;
    private javax.swing.JTextField onECOTotal;
    private static javax.swing.JComboBox<String> routeComboBox;
    private javax.swing.JLabel routeIDLabel;
    private javax.swing.JPanel routeLabel;
    private javax.swing.JFrame routeSearch;
    private javax.swing.JLabel scheduleLabel;
    private javax.swing.JLabel searchWarning;
    private javax.swing.JLabel seatsLabel;
    private javax.swing.JLabel slash1;
    private javax.swing.JLabel slash2;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txtArrival;
    private javax.swing.JTextField txtBUS;
    private javax.swing.JTextField txtDeparture;
    private javax.swing.JTextField txtECO;
    private javax.swing.JTextField txtFind;
    private javax.swing.JTextField txtFlight;
    private javax.swing.JTextField txtSeats;
    // End of variables declaration//GEN-END:variables
}
