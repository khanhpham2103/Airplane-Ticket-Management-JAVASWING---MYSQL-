package GUI;

import BUS.NhanVienBUS;
import DTO.NhanVienDTO;
import GUISupport.TableDark;
import GUISupport.jpanelGradient;
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author PHAM PHU KHANH
 */
public class NhanVienGUI extends javax.swing.JFrame {

    /**
     * Creates new form QLHDFrame
     */
    public NhanVienGUI() {
        initComponents();
//        Insert();
        CreateHeader();
        list();
        setLocationRelativeTo(null);
    }
    
    public void CreateHeader() {
        Vector header = new Vector();
        header.add("Mã nhân viên");
        header.add("Họ");
        header.add("Tên");
        header.add("Giới tính");
        header.add("Ngày sinh");
        header.add("Địa chỉ");
        header.add("Điện thoại");
        if (model.getRowCount() == 0) {
            model = new DefaultTableModel(header, 0);
        }
        tbl.setModel(model);
    }
    
    public void ShowModel(DefaultTableModel md, ArrayList<NhanVienDTO> nvArrList) {
        Vector data;
        model.setRowCount(0);
        for (NhanVienDTO n : nvArrList) {
            data = new Vector();
            data.add(n.getStaffID());
            data.add(n.getStaffLast());
            data.add(n.getStaffFirst());
            data.add(n.getStaffGender());
            data.add(n.getStaffBirth());
            data.add(n.getStaffAddress());
            data.add(n.getStaffTelephone());
            md.addRow(data);
        }
        tbl.setModel(md);
    }
    
    public void list() {
        // Nếu mà có dữ liệu hiện tại thì dùng lun , không có thì kéo db lên
        if (bus.getList() == null) {
            bus.list();
        }
        ArrayList<NhanVienDTO> dsdto = bus.getList();
        ShowModel(model, dsdto);
    }

//    private void Insert() {
//        ArrAtribute[0] = "nhanvienID";
//        ArrAtribute[1] = "departureLocation";
//        ArrAtribute[2] = "arrivalLocation";
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderButtonGroup = new javax.swing.ButtonGroup();
        backgroundPanel = new jpanelGradient();
        informationPanel = new javax.swing.JPanel();
        staffIDLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        txtLast = new javax.swing.JTextField();
        txtStaffID = new javax.swing.JTextField();
        phoneLabel = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        txtFirst = new javax.swing.JTextField();
        nameLabel1 = new javax.swing.JLabel();
        maleButton = new javax.swing.JRadioButton();
        femaleButton = new javax.swing.JRadioButton();
        addressLabel = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        birthLabel = new javax.swing.JLabel();
        txtBirth = new javax.swing.JTextField();
        functionPanel = new javax.swing.JPanel();
        btnUpdate = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnShow = new javax.swing.JButton();
        btnEmpty = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        QLNVPanel = new javax.swing.JPanel();
        QLNVLabel = new javax.swing.JLabel();
        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new TableDark();
        searchWarning = new javax.swing.JLabel();
        dataFieldCB = new javax.swing.JComboBox<>();
        txtFind = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        maleCheckBox = new javax.swing.JCheckBox();
        femaleCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý lnhân viên");
        setBackground(new java.awt.Color(0, 153, 255));
        setPreferredSize(new java.awt.Dimension(1200, 753));

        backgroundPanel.setBackground(new java.awt.Color(0, 153, 255));

        informationPanel.setBackground(new java.awt.Color(0, 153, 255));
        informationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin nhân viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 24), new java.awt.Color(255, 255, 255))); // NOI18N
        informationPanel.setOpaque(false);

        staffIDLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        staffIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        staffIDLabel.setText("Mã nhân viên:");
        staffIDLabel.setToolTipText("");

        nameLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(255, 255, 255));
        nameLabel.setText("Họ nhân viên:");
        nameLabel.setToolTipText(" ");

        genderLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        genderLabel.setForeground(new java.awt.Color(255, 255, 255));
        genderLabel.setText("Giới tính:");

        txtLast.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtLast.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLastFocusLost(evt);
            }
        });

        txtStaffID.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtStaffID.setToolTipText("Để trống nếu muốn tuự động cấp mã nhân viên");
        txtStaffID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStaffIDFocusLost(evt);
            }
        });

        phoneLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        phoneLabel.setForeground(new java.awt.Color(255, 255, 255));
        phoneLabel.setText("Điện thoại:");

        txtPhone.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txtFirst.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtFirst.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFirstFocusLost(evt);
            }
        });

        nameLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        nameLabel1.setForeground(new java.awt.Color(255, 255, 255));
        nameLabel1.setText("Tên nhân viên:");
        nameLabel1.setToolTipText(" ");

        genderButtonGroup.add(maleButton);
        maleButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        maleButton.setForeground(new java.awt.Color(255, 255, 255));
        maleButton.setText("Nam");

        genderButtonGroup.add(femaleButton);
        femaleButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        femaleButton.setForeground(new java.awt.Color(255, 255, 255));
        femaleButton.setText("Nữ");

        addressLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        addressLabel.setForeground(new java.awt.Color(255, 255, 255));
        addressLabel.setText("Địa chỉ:");

        txtAddress.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        birthLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        birthLabel.setForeground(new java.awt.Color(255, 255, 255));
        birthLabel.setText("Ngày sinh (yyyy-MM-dd):");

        txtBirth.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtBirth.setToolTipText("yyyy-MM-dd");

        javax.swing.GroupLayout informationPanelLayout = new javax.swing.GroupLayout(informationPanel);
        informationPanel.setLayout(informationPanelLayout);
        informationPanelLayout.setHorizontalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(informationPanelLayout.createSequentialGroup()
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel)
                            .addComponent(genderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(118, 118, 118)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFirst)
                            .addComponent(txtLast)
                            .addGroup(informationPanelLayout.createSequentialGroup()
                                .addComponent(femaleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(maleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(informationPanelLayout.createSequentialGroup()
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staffIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(birthLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAddress)
                            .addComponent(txtStaffID)
                            .addComponent(txtPhone)
                            .addComponent(txtBirth))))
                .addContainerGap())
        );
        informationPanelLayout.setVerticalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(staffIDLabel)
                    .addComponent(txtStaffID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(txtLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genderLabel)
                    .addComponent(femaleButton)
                    .addComponent(maleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(birthLabel)
                    .addComponent(txtBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLabel)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneLabel)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        functionPanel.setBackground(new java.awt.Color(0, 153, 255));
        functionPanel.setOpaque(false);

        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdate.setText("Sửa");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDel.setText("Xóa");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setText("Quay lại");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnShow.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnShow.setText("Xem danh sách");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        btnEmpty.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEmpty.setText("Làm rỗng");
        btnEmpty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmptyActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout functionPanelLayout = new javax.swing.GroupLayout(functionPanel);
        functionPanel.setLayout(functionPanelLayout);
        functionPanelLayout.setHorizontalGroup(
            functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(functionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnShow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEmpty, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        functionPanelLayout.setVerticalGroup(
            functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, functionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnShow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAdd)
                .addGap(12, 12, 12)
                .addComponent(btnDel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdate)
                .addGap(12, 12, 12)
                .addComponent(btnEmpty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack)
                .addContainerGap())
        );

        QLNVPanel.setBackground(new java.awt.Color(0, 153, 255));
        QLNVPanel.setOpaque(false);

        QLNVLabel.setBackground(new java.awt.Color(0, 153, 255));
        QLNVLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        QLNVLabel.setForeground(new java.awt.Color(255, 255, 255));
        QLNVLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        QLNVLabel.setText("Quản lý nhân viên");

        javax.swing.GroupLayout QLNVPanelLayout = new javax.swing.GroupLayout(QLNVPanel);
        QLNVPanel.setLayout(QLNVPanelLayout);
        QLNVPanelLayout.setHorizontalGroup(
            QLNVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QLNVPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(QLNVLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addContainerGap())
        );
        QLNVPanelLayout.setVerticalGroup(
            QLNVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QLNVPanelLayout.createSequentialGroup()
                .addComponent(QLNVLabel)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        tablePanel.setBackground(new java.awt.Color(0, 153, 255));
        tablePanel.setOpaque(false);

        tbl.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã nhân viên", "Họ", "Tên", "Giới tính","Ngày sinh", "Địa chỉ", "Điện thoại"
            }
        ));
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        tbl.setRowHeight(tbl.getRowHeight() + 15);
        tbl.getTableHeader().setFont(new Font("Segoe UI", 1 , 16));
        jScrollPane1.setViewportView(tbl);

        searchWarning.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        searchWarning.setForeground(new java.awt.Color(204, 0, 51));
        searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");

        dataFieldCB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dataFieldCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"--Chọn tiêu chí", "Mã nhân viên", "Họ", "Tên", "Năm sinh", "Địa chỉ", "Điện thoại" }));
        dataFieldCB.setSelectedIndex(0);

        txtFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindActionPerformed(evt);
            }
        });

        btnFind.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnFind.setText("Tìm kiếm");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        maleCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        maleCheckBox.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        maleCheckBox.setSelected(true);
        maleCheckBox.setText("Nam");

        femaleCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        femaleCheckBox.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        femaleCheckBox.setSelected(true);
        femaleCheckBox.setText("Nữ");

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addComponent(dataFieldCB, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maleCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(femaleCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFind, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFind)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchWarning)))
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dataFieldCB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maleCheckBox)
                        .addComponent(femaleCheckBox))
                    .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFind, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnFind)
                        .addComponent(searchWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );

        searchWarning.setVisible(false);

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(informationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(functionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(QLNVPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(QLNVPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(functionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(informationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        int i = tbl.getSelectedRow();
        txtStaffID.setBackground(Color.lightGray);
        txtStaffID.setEditable(false);
        txtStaffID.setText((String) tbl.getModel().getValueAt(i, 0));
        txtLast.setText((String) tbl.getModel().getValueAt(i, 1));
        txtFirst.setText((String) tbl.getModel().getValueAt(i, 2));
        if ("Nữ".equals(tbl.getModel().getValueAt(i, 3))) {
            femaleButton.setSelected(true);
        } else {
            maleButton.setSelected(true);
        }
        txtBirth.setText((String) tbl.getModel().getValueAt(i, 4));
        txtAddress.setText((String) tbl.getModel().getValueAt(i, 5));
        txtPhone.setText((String) tbl.getModel().getValueAt(i, 6));
    }//GEN-LAST:event_tblMouseClicked
    

    private void txtStaffIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStaffIDFocusLost
//        id = 0;
//        ShowTextFieldWhere(id, txtStaffID.getText());
    }//GEN-LAST:event_txtStaffIDFocusLost

    private void txtLastFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLastFocusLost
//        id = 1;
//        ShowTextFieldWhere(id, txtLast.getText());
    }//GEN-LAST:event_txtLastFocusLost

    private void txtFirstFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstFocusLost

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String staffID = "";
        if(txtStaffID.getText().isBlank()){
            staffID = bus.getNextID();
        }
        else{
            staffID = txtStaffID.getText().toUpperCase();
        }
        String staffLast = txtLast.getText();
        String staffFirst = txtFirst.getText();
        String staffGender = "";
        if (femaleButton.isSelected()) {
            staffGender = "Nữ";
        } else if (maleButton.isSelected()) {
            staffGender = "Nam";
        } else {
            staffGender = "";
        }
        String staffBirth = txtBirth.getText();
        String staffAddress = txtAddress.getText();
        String staffTelephone = txtPhone.getText();
        if (staffTelephone.length() > 10) {
            staffTelephone = (String) staffTelephone.subSequence(0, 10);
        }
        boolean check = false;
        ArrayList<NhanVienDTO> staffArrList = bus.getList();
        for (NhanVienDTO nv : staffArrList) {
            if (staffID.toLowerCase().equals(nv.getStaffID().toLowerCase())) {
                check = true;
                break;
            }
        }
        if (check == true) {
            JOptionPane.showMessageDialog(null, "Mã nhân viên đã tồn tại");
        } else {
            NhanVienDTO nv = new NhanVienDTO(staffID, staffLast, staffFirst, staffGender, staffBirth, staffAddress, staffTelephone);
            bus.add(nv);
            ShowModel(model, bus.getList());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEmptyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmptyActionPerformed
        txtStaffID.setEditable(true);
        txtStaffID.setBackground(Color.lightGray);
        txtStaffID.setText("");
        txtLast.setText("");
        txtFirst.setText("");
        txtBirth.setText("");
        txtAddress.setText("");
        genderButtonGroup.clearSelection();
        txtPhone.setText("");
    }//GEN-LAST:event_btnEmptyActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        list();
        ShowModel(model, bus.getList());
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        int confirmation = JOptionPane.showConfirmDialog(this, "Quay lại?", "Xác nhận quay lại", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.YES_OPTION) {
            MENU menu = new MENU();
            menu.setVisible(true);
            closeFrame(this);
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String staffID = txtStaffID.getText();
        String staffLast = txtLast.getText();
        String staffFirst = txtFirst.getText();
        String staffGender = "";
        if (femaleButton.isSelected()) {
            staffGender = "Nữ";
        } else if (maleButton.isSelected()) {
            staffGender = "Nam";
        }
        String staffBirth = txtBirth.getText();
        String staffAddress = txtAddress.getText();
        String staffTelephone = txtPhone.getText();
        if (staffTelephone.length() > 10) {
            staffTelephone = (String) staffTelephone.subSequence(0, 10);
        }
        NhanVienDTO tmp = new NhanVienDTO(staffID, staffLast, staffFirst, staffGender, staffBirth, staffAddress, staffTelephone);
        bus.set(tmp);
        ShowModel(model, bus.getList());
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindActionPerformed
        switch (dataFieldCB.getSelectedIndex()) {
            case 0:
                JOptionPane.showMessageDialog(null, "Vui lòng chọn tiêu chí bạn cần tìm");
                break;
            case 1:
                searchID();
                break;
            case 2:
                searchFirst();
                break;
            case 3:
                searchFirst();
                break;
            case 4:
                searchYear();
                break;
            case 5:
                searchAddress();
                break;
            case 6:
                searchPhone();
        }
    }//GEN-LAST:event_txtFindActionPerformed
    private void searchID() {
        model.setRowCount(0);
        for (int i = 0; i < bus.getList().size(); i++) {
            if (bus.getList().get(i).getStaffID().toLowerCase().equals(txtFind.getText().toLowerCase())) {
                NhanVienDTO n = bus.getList().get(i);
                Vector data = new Vector();
                data.add(n.getStaffID());
                data.add(n.getStaffLast());
                data.add(n.getStaffFirst());
                data.add(n.getStaffGender());
                data.add(n.getStaffBirth());
                data.add(n.getStaffAddress());
                data.add(n.getStaffTelephone());
                model.addRow(data);
            }
        }
        if (model.getRowCount() == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(false);
            tbl.setModel(model);
        }
    }
    
//    private ArrayList<NhanVienDTO> searchIDAL(){
//        ArrayList<NhanVienDTO> AL = new ArrayList<>();
//        for(NhanVienDTO nv : bus.getList()){
//            if (nv.getStaffID().toLowerCase().equals(txtFind.getText().toLowerCase())) {
//                AL.add(nv);
//            }
//        }
//        return AL;
//    }
    
    private void searchLast() {
        femaleName();
        maleName();
    }
    
    private void searchFirst() {
        femaleName();
        maleName();
    }
    
    private void maleName() {
        if (maleCheckBox.isSelected()) {
            for (int i = 0; i < bus.getList().size(); i++) {
                if (bus.getList().get(i).getStaffLast().toLowerCase().equals(txtFind.getText().toLowerCase()) && bus.getList().get(i).getStaffGender().equals("Nam")) {
                    NhanVienDTO n = bus.getList().get(i);
                    Vector data = new Vector();
                    data.add(n.getStaffID());
                    data.add(n.getStaffLast());
                    data.add(n.getStaffFirst());
                    data.add(n.getStaffGender());
                    data.add(n.getStaffBirth());
                    data.add(n.getStaffAddress());
                    data.add(n.getStaffTelephone());
                    model.addRow(data);
                } else if (bus.getList().get(i).getStaffFirst().toLowerCase().contains(txtFind.getText().toLowerCase()) && bus.getList().get(i).getStaffGender().equals("Nam")) {
                    NhanVienDTO n = bus.getList().get(i);
                    Vector data = new Vector();
                    data.add(n.getStaffID());
                    data.add(n.getStaffLast());
                    data.add(n.getStaffFirst());
                    data.add(n.getStaffGender());
                    data.add(n.getStaffBirth());
                    data.add(n.getStaffAddress());
                    data.add(n.getStaffTelephone());
                    model.addRow(data);
                }
            }
        }
        if (model.getRowCount() == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(true);
            searchWarning.setText("Có " + model.getRowCount() + " kết quả");
            tbl.setModel(model);
        }
    }
    
    private void femaleName() {
        model.setRowCount(0);
        if (femaleCheckBox.isSelected()) {
            for (int i = 0; i < bus.getList().size(); i++) {
                if (bus.getList().get(i).getStaffLast().toLowerCase().equals(txtFind.getText().toLowerCase()) && bus.getList().get(i).getStaffGender().equals("Nữ")) {
                    NhanVienDTO n = bus.getList().get(i);
                    Vector data = new Vector();
                    data.add(n.getStaffID());
                    data.add(n.getStaffLast());
                    data.add(n.getStaffFirst());
                    data.add(n.getStaffGender());
                    data.add(n.getStaffBirth());
                    data.add(n.getStaffAddress());
                    data.add(n.getStaffTelephone());
                    model.addRow(data);
                } else if (bus.getList().get(i).getStaffFirst().toLowerCase().contains(txtFind.getText().toLowerCase()) && bus.getList().get(i).getStaffGender().equals("Nữ")) {
                    NhanVienDTO n = bus.getList().get(i);
                    Vector data = new Vector();
                    data.add(n.getStaffID());
                    data.add(n.getStaffLast());
                    data.add(n.getStaffFirst());
                    data.add(n.getStaffGender());
                    data.add(n.getStaffBirth());
                    data.add(n.getStaffAddress());
                    data.add(n.getStaffTelephone());
                    model.addRow(data);
                }
            }
        }
        if (model.getRowCount() == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(true);
            searchWarning.setText("Có " + model.getRowCount() + " kết quả");
            tbl.setModel(model);
        }
    }
    
    private void maleYear() {
        if (maleCheckBox.isSelected()) {
            for (int i = 0; i < bus.getList().size(); i++) {
                String year = bus.getList().get(i).getStaffBirth().substring(0, 4);
                if (year.toLowerCase().contains(txtFind.getText().toLowerCase()) && bus.getList().get(i).getStaffGender().equals("Nam")) {
                    NhanVienDTO n = bus.getList().get(i);
                    Vector data = new Vector();
                    data.add(n.getStaffID());
                    data.add(n.getStaffLast());
                    data.add(n.getStaffFirst());
                    data.add(n.getStaffGender());
                    data.add(n.getStaffBirth());
                    data.add(n.getStaffAddress());
                    data.add(n.getStaffTelephone());
                    model.addRow(data);
                }
            }
        }
    }
    
    private void femaleYear() {
        if (femaleCheckBox.isSelected()) {
            for (int i = 0; i < bus.getList().size(); i++) {
                String year = bus.getList().get(i).getStaffBirth().substring(0, 4);
                if (year.toLowerCase().contains(txtFind.getText().toLowerCase()) && bus.getList().get(i).getStaffGender().equals("Nữ")) {
                    NhanVienDTO n = bus.getList().get(i);
                    Vector data = new Vector();
                    data.add(n.getStaffID());
                    data.add(n.getStaffLast());
                    data.add(n.getStaffFirst());
                    data.add(n.getStaffGender());
                    data.add(n.getStaffBirth());
                    data.add(n.getStaffAddress());
                    data.add(n.getStaffTelephone());
                    model.addRow(data);
                }
            }
        }
    }
    
    private void searchYear() {
        model.setRowCount(0);
        femaleYear();
        maleYear();
        if (model.getRowCount() == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(true);
            searchWarning.setText("Có " + model.getRowCount() + " kết quả");
            tbl.setModel(model);
        }
    }
    
    private void maleAddress() {
        if (maleCheckBox.isSelected()) {
            for (int i = 0; i < bus.getList().size(); i++) {
                String address = bus.getList().get(i).getStaffAddress();
                if (address.toLowerCase().contains(txtFind.getText().toLowerCase()) && bus.getList().get(i).getStaffGender().equals("Nam")) {
                    NhanVienDTO n = bus.getList().get(i);
                    Vector data = new Vector();
                    data.add(n.getStaffID());
                    data.add(n.getStaffLast());
                    data.add(n.getStaffFirst());
                    data.add(n.getStaffGender());
                    data.add(n.getStaffBirth());
                    data.add(n.getStaffAddress());
                    data.add(n.getStaffTelephone());
                    model.addRow(data);
                }
            }
        }
    }
    
    private void femaleAddress() {
        if (femaleCheckBox.isSelected()) {
            for (int i = 0; i < bus.getList().size(); i++) {
                String address = bus.getList().get(i).getStaffAddress();
                if (address.toLowerCase().contains(txtFind.getText().toLowerCase()) && bus.getList().get(i).getStaffGender().equals("Nữ")) {
                    NhanVienDTO n = bus.getList().get(i);
                    Vector data = new Vector();
                    data.add(n.getStaffID());
                    data.add(n.getStaffLast());
                    data.add(n.getStaffFirst());
                    data.add(n.getStaffGender());
                    data.add(n.getStaffBirth());
                    data.add(n.getStaffAddress());
                    data.add(n.getStaffTelephone());
                    model.addRow(data);
                }
            }
        }
    }
    
    private void searchAddress() {
        model.setRowCount(0);
        femaleAddress();
        maleAddress();
        if (model.getRowCount() == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(true);
            searchWarning.setText("Có " + model.getRowCount() + " kết quả");
            tbl.setModel(model);
        }
    }
    
    private void malePhone() {
        if (maleCheckBox.isSelected()) {
            for (int i = 0; i < bus.getList().size(); i++) {
                if (bus.getList().get(i).getStaffTelephone().contains(txtFind.getText()) && bus.getList().get(i).getStaffGender().equals("Nam")) {
                    NhanVienDTO n = bus.getList().get(i);
                    Vector data = new Vector();
                    data.add(n.getStaffID());
                    data.add(n.getStaffLast());
                    data.add(n.getStaffFirst());
                    data.add(n.getStaffGender());
                    data.add(n.getStaffBirth());
                    data.add(n.getStaffAddress());
                    data.add(n.getStaffTelephone());
                    model.addRow(data);
                }
            }
        }
    }
    
    private void femalePhone() {
        if (femaleCheckBox.isSelected()) {
            for (int i = 0; i < bus.getList().size(); i++) {
                if (bus.getList().get(i).getStaffTelephone().contains(txtFind.getText()) && bus.getList().get(i).getStaffGender().equals("Nữ")) {
                    NhanVienDTO n = bus.getList().get(i);
                    Vector data = new Vector();
                    data.add(n.getStaffID());
                    data.add(n.getStaffLast());
                    data.add(n.getStaffFirst());
                    data.add(n.getStaffGender());
                    data.add(n.getStaffBirth());
                    data.add(n.getStaffAddress());
                    data.add(n.getStaffTelephone());
                    model.addRow(data);
                }
            }
        }
    }
    
    private void searchPhone() {
        model.setRowCount(0);
        femalePhone();
        malePhone();
        if (model.getRowCount() == 0) {
            searchWarning.setVisible(true);
            searchWarning.setText("Không có thông tin bạn cần tìm hoặc đã nhập sai");
        } else {
            searchWarning.setVisible(true);
            searchWarning.setText("Có " + model.getRowCount() + " kết quả");
            tbl.setModel(model);
        }
    }

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        txtFindActionPerformed(evt);
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        bus.delete(txtStaffID.getText());
        ShowModel(model, bus.getList());
    }//GEN-LAST:event_btnDelActionPerformed
    private void closeFrame(JFrame frame) {
        WindowEvent closeWindow = new WindowEvent(frame, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(NhanVienGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(NhanVienGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(NhanVienGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(NhanVienGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                try {
//                    new NhanVienGUI().setVisible(true);
//                } catch (Exception ex) {
//                    Logger.getLogger(NhanVienGUI.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//        
//    }
    private String[] ArrAtribute = new String[4];
    private int id = -1;
    private DefaultTableModel model = new DefaultTableModel();
    private NhanVienBUS bus = new NhanVienBUS();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel QLNVLabel;
    private javax.swing.JPanel QLNVPanel;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JLabel birthLabel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnEmpty;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnShow;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> dataFieldCB;
    private javax.swing.JRadioButton femaleButton;
    private javax.swing.JCheckBox femaleCheckBox;
    private javax.swing.JPanel functionPanel;
    private javax.swing.ButtonGroup genderButtonGroup;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton maleButton;
    private javax.swing.JCheckBox maleCheckBox;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nameLabel1;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JLabel searchWarning;
    private javax.swing.JLabel staffIDLabel;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtBirth;
    private javax.swing.JTextField txtFind;
    private javax.swing.JTextField txtFirst;
    private javax.swing.JTextField txtLast;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtStaffID;
    // End of variables declaration//GEN-END:variables
}
